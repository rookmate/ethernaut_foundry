// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import "../Level.sol";

interface IAlienCodex {
    function owner() external returns (address);
    function make_contact() external;
    function record(bytes32 _content) external;
    function retract() external;
    function revise(uint i, bytes32 _content) external;
}

contract AlienCodexFactory is Level {
    constructor() Owned(msg.sender) {}
    
    function createInstance(address) public payable override returns (address) {
        address instance;
        /* To get this bytecode run:
        1) FOUNDRY_PROFILE=0_5_x forge build
        2) FOUNDRY_PROFILE=0_5_x forge inspect AlienCodex bytecode
        3) copy to variable bytecode without the initial 0x
        */
        bytes memory bytecode = hex"6080604052610016336001600160e01b0361001b16565b61006b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61043b8061007a6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063715018a611610066578063715018a6146100e95780638da5cb5b146100f157806394bd756914610115578063b5c645bd14610144578063f2fde38b1461016157610093565b80630339f3001461009857806333a8c45a146100bd57806347f57b32146100d957806358699c55146100e1575b600080fd5b6100bb600480360360408110156100ae57600080fd5b5080359060200135610187565b005b6100c56101b8565b604080519115158252519081900360200190f35b6100bb6101c8565b6100bb6101f1565b6100bb610206565b6100f961021a565b604080516001600160a01b039092168252519081900360200190f35b6101326004803603602081101561012b57600080fd5b503561022a565b60408051918252519081900360200190f35b6100bb6004803603602081101561015a57600080fd5b5035610248565b6100bb6004803603602081101561017757600080fd5b50356001600160a01b031661028f565b600054600160a01b900460ff1661019a57fe5b80600183815481106101a857fe5b6000918252602090912001555050565b600054600160a01b900460ff1681565b600054600160a01b900460ff166101db57fe5b60018054906101ee906000198301610399565b50565b6000805460ff60a01b1916600160a01b179055565b61020e6102e5565b6102186000610349565b565b6000546001600160a01b03165b90565b6001818154811061023757fe5b600091825260209091200154905081565b600054600160a01b900460ff1661025b57fe5b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60155565b6102976102e5565b6001600160a01b0381166102dc5760405162461bcd60e51b81526004018080602001828103825260268152602001806103e16026913960400191505060405180910390fd5b6101ee81610349565b336102ee61021a565b6001600160a01b031614610218576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8154818355818111156103bd576000838152602090206103bd9181019083016103c2565b505050565b61022791905b808211156103dc57600081556001016103c8565b509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a265627a7a72305820bc52f210827e59830559c3896ad4fa9f9f1c2ecc45ae5e31303be7b00cb902bc64736f6c634300050a0032";
        assembly {
            instance := create(0, add(bytecode, 0x20), mload(bytecode))  // create(weiValue, memOffset, length)
            if iszero(extcodesize(instance)) {
                revert(0, 0)
            }
        }

        return instance;
    }

    function validateInstance(address payable _instance, address _player) override public returns (bool) {
        return IAlienCodex(_instance).owner() == _player;
    }

    receive() external payable {}
}